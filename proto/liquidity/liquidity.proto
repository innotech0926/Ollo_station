syntax = "proto3";
package ollo.liquidity;

import "gogoproto/gogo.proto";
import "cosmos_proto/coin.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option go_package = "ollo/x/liquidity/types";
option (gogoproto.goproto_getters_all) = false;
message Params {
    uint32 batch_size = 1;
  
    uint32 tick_precision = 2;
  
    string fee_collector_address = 3;
  
    string dust_collector_address = 4;
  
    string min_initial_pool_coin_supply = 5
        [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  
    repeated cosmos.base.v1beta1.Coin pair_creation_fee = 6
        [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
  
    repeated cosmos.base.v1beta1.Coin pool_creation_fee = 7
        [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
  
    string min_initial_deposit_amount = 8
        [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  
    string max_price_limit_ratio = 9
        [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  
    uint32 max_num_market_making_order_ticks = 10;
  
    google.protobuf.Duration max_order_lifespan = 11 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
  
    string swap_fee_rate = 12
        [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  
    string withdraw_fee_rate = 13
        [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  
    uint64 deposit_extra_gas = 14
        [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Gas", (gogoproto.nullable) = false];
  
    uint64 withdraw_extra_gas = 15
        [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Gas", (gogoproto.nullable) = false];
  
    uint64 order_extra_gas = 16
        [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Gas", (gogoproto.nullable) = false];
  }

message Pair {
    uint64 id = 1;
  
    string base_coin_denom = 2;
  
    string quote_coin_denom = 3;
  
    string escrow_address = 4;
  
    uint64 last_order_id = 5;
  
    string last_price = 6 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  
    uint64 current_batch_id = 7;
  }

// Structure for the pool type to distinguish the characteristics of the reserve pools.
message PoolType {
    option (gogoproto.equal) = true;

    // This is the id of the pool_type that is used as pool_type_id for pool creation.
    // In this version, only pool-type-id 1 is supported.
    // {"id":1,"name":"ConstantProductLiquidityPool","min_reserve_coin_num":2,"max_reserve_coin_num":2,"description":""}
    uint64 id = 1 [(gogoproto.moretags) = "yaml:\"id\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    // name of the pool type.
    string name = 2 [(gogoproto.moretags) = "yaml:\"name\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"ConstantProductLiquidityPool\"",
        }];

    // minimum number of reserveCoins for LiquidityPoolType, only 2 reserve coins are supported.
    uint32 min_reserve_coin_num = 3 [(gogoproto.moretags) = "yaml:\"min_reserve_coin_num\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"2\"",
            format: "uint32"
        }];

    // maximum number of reserveCoins for LiquidityPoolType, only 2 reserve coins are supported.
    uint32 max_reserve_coin_num = 4 [(gogoproto.moretags) = "yaml:\"max_reserve_coin_num\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"2\"",
            format: "uint32"
        }];

    // description of the pool type.
    string description = 5 [(gogoproto.moretags) = "yaml:\"description\""];
}
// Pool defines the liquidity pool that contains pool information.
message Pool {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    // id of the pool
    uint64 id = 1 [(gogoproto.moretags) = "yaml:\"id\"", (gogoproto.jsontag) = "id",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    // id of the pool_type
    uint64 type_id = 2 [(gogoproto.moretags) = "yaml:\"type_id\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    uint64 pair_id = 3 [(gogoproto.moretags) = "yaml:\"pair_id\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    string creator = 4;


    // reserve account address of the pool
    string reserve_account_address = 5 [(gogoproto.moretags) = "yaml:\"reserve_account_address\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"cosmos16ddqestwukv0jzcyfn3fdfq9h2wrs83cr4rfm3\"",
            format: "sdk.AccAddress"
        }];

    // denom of pool coin of the pool
    string pool_coin_denom = 6;

    string min_price = 7 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];

    string max_price = 8 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];

    uint64 prev_deposit_request_id = 9;

    uint64 prev_withdraw_request_id = 10;
  
    bool inactive = 11;
}

// Metadata for the state of each pool for invariant checking after genesis export or import.
message PoolMetadata {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    // id of the pool
    uint64 pool_id = 1 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    // pool coin issued at the pool
    cosmos.base.v1beta1.Coin pool_coin_total_supply = 2 [
        (gogoproto.moretags)   = "yaml:\"pool_coin_total_supply\"",
        (gogoproto.nullable)   = false,
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "{\"denom\": \"poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4\", \"amount\": \"1000000\"}",
            format: "sdk.Coin"
        }];

    // reserve coins deposited in the pool
    repeated cosmos.base.v1beta1.Coin reserve_coins = 3 [
        (gogoproto.moretags)   = "yaml:\"reserve_coins\"",
        (gogoproto.nullable)   = false,
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "[{\"denom\": \"denomX\", \"amount\": \"1000000\"}, {\"denom\": \"denomY\", \"amount\": \"2000000\"}]",
            format: "sdk.Coins"
        }];
}

// PoolBatch defines the batch or batches of a given liquidity pool that contains indexes of deposit, withdraw, and swap messages.
// Index param increments by 1 if the pool id is same.
message PoolBatch {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    // id of the pool
    uint64 pool_id = 1 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    // index of this batch
    uint64 index = 2 [(gogoproto.moretags) = "yaml:\"index\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    // height where this batch is started
    int64 begin_height = 3 [(gogoproto.moretags) = "yaml:\"begin_height\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1000\"",
            format: "int64"
        }];

    // last index of DepositMsgStates
    uint64 deposit_msg_index = 4 [(gogoproto.moretags) = "yaml:\"deposit_msg_index\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    // last index of WithdrawMsgStates
    uint64 withdraw_msg_index = 5 [(gogoproto.moretags) = "yaml:\"withdraw_msg_index\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    // last index of SwapMsgStates
    uint64 swap_msg_index = 6 [(gogoproto.moretags) = "yaml:\"swap_msg_index\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    // true if executed, false if not executed
    bool executed = 7 [(gogoproto.moretags) = "yaml:\"executed\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "true",
        }];
}

// DepositMsgState defines the state of deposit message that contains state information as it is processed in the next batch or batches.
message DepositMsgState {

    // height where this message is appended to the batch
    int64 msg_height = 1 [(gogoproto.moretags) = "yaml:\"msg_height\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1000\"",
            format: "int64"
        }];

    // index of this deposit message in this liquidity pool
    uint64 msg_index = 2 [(gogoproto.moretags) = "yaml:\"msg_index\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    // true if executed on this batch, false if not executed
    bool executed = 3 [(gogoproto.moretags) = "yaml:\"executed\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "true",
        }];

    // true if executed successfully on this batch, false if failed
    bool succeeded = 4 [(gogoproto.moretags) = "yaml:\"succeeded\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "true",
        }];

    // true if ready to be deleted on kvstore, false if not ready to be deleted
    bool to_be_deleted = 5 [(gogoproto.moretags) = "yaml:\"to_be_deleted\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "true",
        }];

    // MsgDepositWithinBatch
    // MsgDepositWithinBatch msg = 6 [(gogoproto.moretags) = "yaml:\"msg\""];
}

// WithdrawMsgState defines the state of the withdraw message that contains state information as the message is processed in the next batch or batches.
message WithdrawMsgState {

    // height where this message is appended to the batch
    int64 msg_height = 1 [(gogoproto.moretags) = "yaml:\"msg_height\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1000\"",
            format: "int64"
        }];

    // index of this withdraw message in this liquidity pool
    uint64 msg_index = 2 [(gogoproto.moretags) = "yaml:\"msg_index\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    // true if executed on this batch, false if not executed
    bool executed = 3 [(gogoproto.moretags) = "yaml:\"executed\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "true",
        }];

    // true if executed successfully on this batch, false if failed
    bool succeeded = 4 [(gogoproto.moretags) = "yaml:\"succeeded\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "true",
        }];

    // true if ready to be deleted on kvstore, false if not ready to be deleted
    bool to_be_deleted = 5 [(gogoproto.moretags) = "yaml:\"to_be_deleted\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "true",
        }];

    // MsgWithdrawWithinBatch
    // MsgWithdrawWithinBatch msg = 6 [(gogoproto.moretags) = "yaml:\"msg\""];
}

// SwapMsgState defines the state of the swap message that contains state information as the message is processed in the next batch or batches.
message SwapMsgState {

    // height where this message is appended to the batch
    int64 msg_height = 1 [(gogoproto.moretags) = "yaml:\"msg_height\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1000\"",
            format: "int64"
        }];

    // index of this swap message in this liquidity pool
    uint64 msg_index = 2 [(gogoproto.moretags) = "yaml:\"msg_index\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    // true if executed on this batch, false if not executed
    bool executed = 3 [(gogoproto.moretags) = "yaml:\"executed\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "true",
        }];

    // true if executed successfully on this batch, false if failed
    bool succeeded = 4 [(gogoproto.moretags) = "yaml:\"succeeded\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "true",
        }];

    // true if ready to be deleted on kvstore, false if not ready to be deleted
    bool to_be_deleted = 5 [(gogoproto.moretags) = "yaml:\"to_be_deleted\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "true",
        }];

    // swap orders are cancelled when current height is equal to or higher than ExpiryHeight
    int64 order_expiry_height = 6 [(gogoproto.moretags) = "yaml:\"order_expiry_height\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1000\"",
            format: "int64"
        }];

    // offer coin exchanged until now
    cosmos.base.v1beta1.Coin exchanged_offer_coin = 7 [
        (gogoproto.nullable)     = false,
        (gogoproto.moretags)     = "yaml:\"exchanged_offer_coin\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "{\"denom\": \"denomX\", \"amount\": \"600000\"}",
            format: "sdk.Coin"
        }];

    // offer coin currently remaining to be exchanged
    cosmos.base.v1beta1.Coin remaining_offer_coin = 8 [
        (gogoproto.nullable)     = false,
        (gogoproto.moretags)     = "yaml:\"remaining_offer_coin\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "{\"denom\": \"denomX\", \"amount\": \"400000\"}",
            format: "sdk.Coin"
        }];

    // reserve fee for pays fee in half offer coin
    cosmos.base.v1beta1.Coin reserved_offer_coin_fee = 9 [
        (gogoproto.nullable)     = false,
        (gogoproto.moretags)     = "yaml:\"reserved_offer_coin_fee\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "{\"denom\": \"denomX\", \"amount\": \"5000\"}",
            format: "sdk.Coin"
        }
    ];

    // MsgSwapWithinBatch
    // MsgSwapWithinBatch msg = 10 [(gogoproto.moretags) = "yaml:\"msg\""];
}
// OrderStatus enumerates order statuses.
enum OrderStatus {
    option (gogoproto.goproto_enum_prefix) = false;
  
    // ORDER_STATUS_UNSPECIFIED specifies unknown order status
    ORDER_STATUS_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "OrderStatusUnspecified"];
  
    // ORDER_STATUS_NOT_EXECUTED indicates the order has not been executed yet
    ORDER_STATUS_NOT_EXECUTED = 1 [(gogoproto.enumvalue_customname) = "OrderStatusNotExecuted"];
  
    // ORDER_STATUS_NOT_MATCHED indicates the order has been executed but has no match
    ORDER_STATUS_NOT_MATCHED = 2 [(gogoproto.enumvalue_customname) = "OrderStatusNotMatched"];
  
    // ORDER_STATUS_PARTIALLY_MATCHED indicates the order has been partially matched
    ORDER_STATUS_PARTIALLY_MATCHED = 3 [(gogoproto.enumvalue_customname) = "OrderStatusPartiallyMatched"];
  
    // ORDER_STATUS_COMPLETED indicates the order has been fully matched and completed
    ORDER_STATUS_COMPLETED = 4 [(gogoproto.enumvalue_customname) = "OrderStatusCompleted"];
  
    // ORDER_STATUS_CANCELED indicates the order has been canceled
    ORDER_STATUS_CANCELED = 5 [(gogoproto.enumvalue_customname) = "OrderStatusCanceled"];
  
    // ORDER_STATUS_EXPIRED indicates the order has been expired
    ORDER_STATUS_EXPIRED = 6 [(gogoproto.enumvalue_customname) = "OrderStatusExpired"];
  }
  // OrderType enumerates order types.
enum OrderType {
    option (gogoproto.goproto_enum_prefix) = false;
  
    // ORDER_TYPE_UNSPECIFIED specifies unknown order type.
    ORDER_TYPE_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "OrderTypeUnspecified"];
  
    // ORDER_TYPE_LIMIT specifies limit order type.
    ORDER_TYPE_LIMIT = 1 [(gogoproto.enumvalue_customname) = "OrderTypeLimit"];
  
    // ORDER_TYPE_MARKET specifies market order type.
    ORDER_TYPE_MARKET = 2 [(gogoproto.enumvalue_customname) = "OrderTypeMarket"];
  
    // ORDER_TYPE_MM specifies MM(market making) order type.
    ORDER_TYPE_MM = 3 [(gogoproto.enumvalue_customname) = "OrderTypeMM"];
  }
  
  // OrderDirection enumerates order directions.
  enum OrderDirection {
    option (gogoproto.goproto_enum_prefix) = false;
  
    // ORDER_DIRECTION_UNSPECIFIED specifies unknown order direction
    ORDER_DIRECTION_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "OrderDirectionUnspecified"];
  
    // ORDER_DIRECTION_BUY specifies buy(swap quote coin to base coin) order direction
    ORDER_DIRECTION_BUY = 1 [(gogoproto.enumvalue_customname) = "OrderDirectionBuy"];
  
    // ORDER_DIRECTION_SELL specifies sell(swap base coin to quote coin) order direction
    ORDER_DIRECTION_SELL = 2 [(gogoproto.enumvalue_customname) = "OrderDirectionSell"];
  }
  
  // RequestStatus enumerates request statuses.
  enum RequestStatus {
    option (gogoproto.goproto_enum_prefix) = false;
  
    // REQUEST_STATUS_UNSPECIFIED specifies unknown request status
    REQUEST_STATUS_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "RequestStatusUnspecified"];
  
    // REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
    REQUEST_STATUS_NOT_EXECUTED = 1 [(gogoproto.enumvalue_customname) = "RequestStatusNotExecuted"];
  
    // REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
    REQUEST_STATUS_SUCCEEDED = 2 [(gogoproto.enumvalue_customname) = "RequestStatusSucceeded"];
  
    // REQUEST_STATUS_FAILED indicates the request is failed
    REQUEST_STATUS_FAILED = 3 [(gogoproto.enumvalue_customname) = "RequestStatusFailed"];
  }
  // DepositRequest defines a deposit request.
message DepositRequest {
    // id specifies the id for the request
    uint64 id = 1;
  
    // pool_id specifies the pool id
    uint64 pool_id = 2;
  
    // msg_height specifies the block height when the request is stored for the batch execution
    int64 msg_height = 3;
  
    // depositor specifies the bech32-encoded address that makes a deposit to the pool
    string depositor = 4;
  
    // deposit_coins specifies the amount of coins to deposit.
    repeated cosmos.base.v1beta1.Coin deposit_coins = 5
        [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
  
    // accepted_coins specifies the amount of coins that are accepted.
    repeated cosmos.base.v1beta1.Coin accepted_coins = 6
        [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
  
    cosmos.base.v1beta1.Coin minted_pool_coin = 7 [(gogoproto.nullable) = false];
  
    RequestStatus status = 8;
  }
  
  // WithdrawRequest defines a withdraw request.
  message WithdrawRequest {
    // id specifies the id for the request
    uint64 id = 1;
  
    // pool_id specifies the pool id
    uint64 pool_id = 2;
  
    // msg_height specifies the block height when the request is stored for the batch execution
    int64 msg_height = 3;
  
    // withdrawer specifies the bech32-encoded address that withdraws pool coin from the pool
    string withdrawer = 4;
  
    // pool_coin specifies the pool coin that is a proof of liquidity provider for the pool
    cosmos.base.v1beta1.Coin pool_coin = 5 [(gogoproto.nullable) = false];
  
    // withdrawn_coins specifies the amount of coins that are withdrawn.
    repeated cosmos.base.v1beta1.Coin withdrawn_coins = 6
        [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
  
    RequestStatus status = 7;
  }
  
  // Order defines an order.
  message Order {
    // type specifies the typo of the order
    OrderType type = 1;
  
    // id specifies the id of the order
    uint64 id = 2;
  
    // pair_id specifies the pair id
    uint64 pair_id = 3;
  
    // msg_height specifies the block height when the order is stored for the batch execution
    int64 msg_height = 4;
  
    // orderer specifies the bech32-encoded address that makes an order
    string orderer = 5;
  
    // direction specifies the order direction; either buy or sell
    OrderDirection direction = 6;
  
    cosmos.base.v1beta1.Coin offer_coin = 7 [(gogoproto.nullable) = false];
  
    // remaining_offer_coin specifies the remaining offer coin
    cosmos.base.v1beta1.Coin remaining_offer_coin = 8 [(gogoproto.nullable) = false];
  
    // received_coin specifies the received coin after the swap
    cosmos.base.v1beta1.Coin received_coin = 9 [(gogoproto.nullable) = false];
  
    // price specifies the price that an orderer is willing to swap
    string price = 10 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  
    string amount = 11 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  
    string open_amount = 12
        [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  
    // batch_id specifies the pair's batch id when the request is stored
    uint64 batch_id = 13;
  
    google.protobuf.Timestamp expire_at = 14 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  
    OrderStatus status = 15;
  }
  
  // MMOrderIndex defines an index type to quickly find market making orders
  // from an orderer.
  message MMOrderIndex {
    string orderer = 1;
  
    uint64 pair_id = 2;
  
    repeated uint64 order_ids = 3;
  }